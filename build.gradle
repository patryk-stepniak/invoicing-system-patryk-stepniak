buildscript {
    ext {
        flywayVersion = '7.6.0'
        lombokVersion = '1.18.18'
        mongoVersion = '3.12.8'
        spockVersion = '1.3-groovy-2.5'
        springBootVersion = '2.4.2'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
        springDependencyManagementVersion = '1.0.11.RELEASE'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'java'
    id 'groovy'
    id 'checkstyle'
    id 'jacoco'
    id 'codenarc'
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compile "org.flywaydb:flyway-core:${flywayVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.security:spring-security-test"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"
    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"

    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql:42.2.19'

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
}

jacocoTestCoverageVerification {
    executionData tasks.withType(Test)
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.90
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'pl/futurecollars/invoicing/InvoiceApplication.class',
                    'pl/futurecollars/invoicing/config/*'])
        }))
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

check {
    finalizedBy jacocoTestReport
}

check {
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    executionData tasks.withType(Test)
    dependsOn check
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 100
    maxErrors = 100
}

codenarcTest {
    compilationClasspath = sourceSets.main.compileClasspath + sourceSets.main.output + sourceSets.test.compileClasspath + sourceSets.test.output
    configFile = file('config/codenarc/codenarc.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
}

task testWithMemoryDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'memory'
}

task testWithSqlDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'sql'
}

task testWithJpaDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
}

task testWithJpaFlywayDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa-flyway'
}

task testWithMongoDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'mongo'
}

check.dependsOn testWithMemoryDatabase
check.dependsOn testWithSqlDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithJpaFlywayDatabase
check.dependsOn testWithMongoDatabase

String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("mac")) {
    task testWithPostgreSqlDatabase(type: Test) {
        systemProperty 'spring.profiles.active', 'sql-pg'
    }

    check.dependsOn testWithPostgreSqlDatabase
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
}
